MODULE mutex(i, flag, turn)
ASSIGN
--do {
--   flag[i] = true;
--   turn = j;
--   while (flag[j] && turn == j);
--   /* critical section */
--   flag[i] = false;
--   /* remainder section */
--}
--while (true);
next(flag[i]) := case
        TRUE : TRUE;   
        flag[1-i] = FALSE | turn = i : FALSE;
    esac;
next(turn) := case
        TRUE : 1 - i;   
    esac;

MODULE main
VAR
    flag: array 0..1 of boolean;
    turn: 0..1;
    proc_0: process mutex(0, flag, turn);
    proc_1: process mutex(1, flag, turn);
ASSIGN
    init(flag[0]) := FALSE;
    init(flag[1]) := FALSE;

LTLSPEC G !((flag[1] = FALSE) & (turn = 0) | (flag[0] = FALSE) & (turn = 1))
