MODULE mutex(lock)
VAR
    key: boolean;
ASSIGN
    init(key) := FALSE;
    next(key) := case
            TRUE : FALSE;
            --swap while key is false
            key = FALSE & lock = FALSE : FALSE; 
            key = FALSE & lock = TRUE : TRUE;   
        esac;
    next(lock) := case
            --swap while key is false
            key = FALSE & lock = FALSE : FALSE;
            key = FALSE & lock = TRUE : FALSE;
            --key is not false anymore
            TRUE : TRUE;
        esac;
FAIRNESS
    running;
    
MODULE main
VAR
    lock: boolean;
    proc_1: process mutex(lock);
    proc_2: process mutex(lock);
ASSIGN
    init(lock) := TRUE;

LTLSPEC G !((proc_1.key = TRUE) & (proc_2.key = TRUE))
LTLSPEC G (F (proc_1.key = TRUE))
LTLSPEC G (F (proc_2.key = TRUE))

